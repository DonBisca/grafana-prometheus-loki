test_pod:
  enabled: true
  image: bats/bats:v1.1.0
  pullPolicy: IfNotPresent

loki: 
  service:
    type: ClusterIP
    enabled: true
    annotations: {
      cloud.google.com/neg: '{"ingress": true}'
    }
  podSecurityContext:
    fsGroup: 0
    runAsGroup: 0
    runAsNonRoot: false
    runAsUser: 0
  containerSecurityContext:
    readOnlyRootFilesystem: false
    capabilities:
      drop:
        - ALL
  # extraVolumes:
  # - name:  loki-data
  #   nfs:
  #     server: nfs-server.nfs.svc.cluster.local
  #     path: "/loki"
  #     readOnly: false
  # extraVolumeMounts:
  #   - name: loki-data
  #     mountPath: /data/loki
  persistence:
    enabled: true
    size: 15Gi
    existingClaim: pvc-loki    
  enabled: true
  isDefault: true
  url: http://{{(include "loki.serviceName" .)}}:{{ .Values.loki.service.port }}
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  datasource:
    jsonData: "{}"
    uid: ""

  config:
    auth_enabled: false
    ingester:
      chunk_idle_period: 3m
      chunk_block_size: 262144
      chunk_retain_period: 1m
      max_transfer_retries: 0
      lifecycler:
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1

        ## Different ring configs can be used. E.g. Consul
        # ring:
        #   store: consul
        #   replication_factor: 1
        #   consul:
        #     host: "consul:8500"
        #     prefix: ""
        #     http_client_timeout: "20s"
        #     consistent_reads: true
    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      retention_period: 744h
    schema_config:
      configs:
      - from: 2020-10-18
        store: boltdb-shipper
        object_store: filesystem
        schema: v11
        index:
          prefix: index_
          period: 24h
    server:
      http_listen_port: 3100
    storage_config:
      boltdb_shipper:
        active_index_directory: /data/loki/boltdb-shipper-active
        cache_location: /data/loki/boltdb-shipper-cache
        cache_ttl: 24h # Can be increased for faster performance over longer query periods, uses more disk space
        shared_store: filesystem
      filesystem:
        directory: /data/loki/chunks
    chunk_store_config:
      max_look_back_period: 0s
    table_manager:
      retention_deletes_enabled: false
      retention_period: 0s
    compactor:
      working_directory: /data/loki/boltdb-shipper-compactor
      shared_store: filesystem
      retention_enabled: true
      retention_delete_delay: 2h
      retention_delete_worker_count: 150


promtail:
  enabled: true
  config:
    logLevel: info
    serverPort: 3101
    clients:
      - url: http://{{ .Release.Name }}:3100/loki/api/v1/push

fluent-bit:
  enabled: false

grafana:
  enabled: false
  env:
    GF_INSTALL_PLUGINS: hamedkarbasi93-nodegraphapi-datasource,marcusolsson-json-datasource,marcusolsson-dynamictext-panel
  datasources:
    nodegraphapi-plugin-datasource.yaml:
      apiVersion: 1
      datasources:
        - name: "Node Graph API"
          jsonData:
            url: "http://k8spacket.monitoring.svc.cluster.local:8080/nodegraph"
          access: "proxy"
          basicAuth: false
          isDefault: false
          readOnly: false
          type: "hamedkarbasi93-nodegraphapi-datasource"
          typeLogoUrl: "public/plugins/hamedkarbasi93-nodegraphapi-datasource/img/logo.svg"
          typeName: "node-graph-plugin"
          orgId: 1
          version: 1
    marcusolsson-json-datasource.yaml:
      apiVersion: 1
      datasources:
        - name: "JSON API"
          url: "http://k8spacket.monitoring.svc.cluster.local:8080/tlsparser/api/data"
          access: "proxy"
          basicAuth: false
          isDefault: false
          readOnly: false
          type: "marcusolsson-json-datasource"
          typeLogoUrl: "public/plugins/marcusolsson-json-datasource/img/logo.svg"
          typeName: "json-api-plugin"
          orgId: 1
          version: 1  
  persistence:
    enabled: true
    existingClaim: pvc-loki
  grafana.ini:
    server:
      domain: grafanapre.cofares.es
      # #root_url: "%(protocol)s://%(domain)s/"
      root_url: https://grafanapre.cofares.es/
      serve_from_sub_path: true
    smtp:
      enabled: true
      host: 192.0.1.252:25            
      from_address: no_reply_grafana@cofares.es
      ehlo_identity: grafanapre.cofares.es
      startTLS_policy: NoStartTLS
    users:
      allow_sign_up: true
      allow_org_create: true
    auth.saml:
      enabled: true
      idp_metadata_url: https://adfs.cofarespre.com/FederationMetadata/2007-06/FederationMetadata.xml/federationmetadata/2007-06/federationmetadata.xml
      assertion_attribute_name: DisplayName
      assertion_attribute_login: Login
      assertion_attribute_email: Email
      assertion_attribute_groups: Group 
  service:
    type: ClusterIP
    enabled: true
    annotations: {
       cloud.google.com/neg: '{"ingress": true}'
     }
    appProtocol: "tcp"
  hostAliases:
  # - ip: "10.132.70.204"
  #   hostnames:
  #     - "grafanapre.cofares.es"
  ingress:
    enabled: true
    annotations: {
      #  ingress.gcp.kubernetes.io/pre-shared-cert: "monitoring-ssl",
      #  kubernetes.io/ingress.allow-http: "false",
      #  kubernetes.io/ingress.allow-httpsa: "true",
      kubernetes.io/ingress.class: "gce",
      prometheus.io/port: "10254",
      prometheus.io/scrape: "true"
      #  kubernetes.io/ingress.global-static-ip-name: "grafana-cl2"
     }
    hosts: []      
    path: /*
    pathType: ImplementationSpecific   
   

  sidecar:
    datasources:
      label: ""
      labelValue: ""
      enabled: true
      maxLines: 1000
  image:
    tag: 8.3.5

prometheus:
  enabled: false
  isDefault: false
  url: http://{{ include "prometheus.fullname" .}}:{{ .Values.prometheus.server.service.servicePort }}{{ .Values.prometheus.server.prefixURL }}
  # datasource:
  #   jsonData: "{}"
  config:
    scrape_configs:
    - job_name: "k8spacket-metrics"
      metrics_path: /metrics
      scrape_interval: 25s
      static_configs:
      - targets: [k8spacket.monitoring.svc.cluster.local:8080]

filebeat:
  enabled: false
  filebeatConfig:
    filebeat.yml: |
      # logging.level: debug
      filebeat.inputs:
      - type: container
        paths:
          - /var/log/containers/*.log
        processors:
        - add_kubernetes_metadata:
            host: ${NODE_NAME}
            matchers:
            - logs_path:
                logs_path: "/var/log/containers/"
      output.logstash:
        hosts: ["logstash-loki:5044"]

logstash:
  enabled: false
  image: grafana/logstash-output-loki
  imageTag: 1.0.1
  filters:
    main: |-
      filter {
        if [kubernetes] {
          mutate {
            add_field => {
              "container_name" => "%{[kubernetes][container][name]}"
              "namespace" => "%{[kubernetes][namespace]}"
              "pod" => "%{[kubernetes][pod][name]}"
            }
            replace => { "host" => "%{[kubernetes][node][name]}"}
          }
        }
        mutate {
          remove_field => ["tags"]
        }
      }
  outputs:
    main: |-
      output {
        loki {
          url => "http://loki:3100/loki/api/v1/push"
          #username => "test"
          #password => "test"
        }
        # stdout { codec => rubydebug }
      }

# proxy is currently only used by loki test pod
# Note: If http_proxy/https_proxy are set, then no_proxy should include the
# loki service name, so that tests are able to communicate with the loki
# service.
proxy:
  http_proxy: ""
  https_proxy: ""
  no_proxy: ""

